;*****************************************************************************
;
; File:         FileServiceClient.dbl
;
; Description:  A client to the FileService RESTful web API
;
; Author:       Steve Ives (Synergex Professional Services Group)
;
;*****************************************************************************
;
; Copyright (c) 2018, Synergex International, Inc.
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
; * Redistributions of source code must retain the above copyright notice,
;   this list of conditions and the following disclaimer.
;
; * Redistributions in binary form must reproduce the above copyright notice,
;   this list of conditions and the following disclaimer in the documentation
;   and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
;*****************************************************************************

.ifdef DBLNET
import System.Collections.Generic
import System.Linq
import System.Net.Http
import System.Text.Json
import System.Threading.Tasks
.else
import Json
.endc
import ReplicationLibrary

namespace ReplicationLibrary

    public class FileServiceClient

        private mHost, string
        private mPort, i4

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="aHost">Host name or IP address</param>
        ;;; <param name="aPort">IP port number</param>
        public method FileServiceClient
            required in aHost, string
            required in aPort, n
        proc
            mHost = aHost
            mPort = aPort
        endmethod

        ;;; <summary>
        ;;; Ping the FileService
        ;;; </summary>
        ;;; <param name="errorMessage">Returned message</param>
        ;;; <returns></returns>
        public method Ping, boolean
            optional out errorMessage, a
            stack record
                ok, boolean
                httperror, int
                errtxt, string
                requestHeaders, [#]string
                responseHeaders, [#]string
                respopnseBody, string
            endrecord
        proc
            requestHeaders = new string[1]
            requestHeaders[1] = "Host: " + mHost + ":" + %string(mPort)

            using httperror = %http_get(getURI("ping"),5,respopnseBody,errtxt,requestHeaders,responseHeaders,,,,,,,"1.1") select
            (0), ;OK
            begin
                errtxt = ""
                ok = true
            end
            (),
            begin
                errtxt = "HTTP " + %string(httperror) + ": " + errtxt
                ok = false
            end
            endusing

            if (^passed(errorMessage))
                errorMessage = errtxt

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Upload a file
        ;;; </summary>
        ;;; <param name="localFileSpec">Local file specification</param>
        ;;; <param name="serverFileName">Namr of file to create on remote system</param>
        ;;; <param name="serverFileSpec">Returned full file spec on remote system</param>
        ;;; <param name="errorText">Returned error message</param>
        ;;; <returns>Result of operation</returns>
        public method Upload, boolean
            required in localFileSpec, string
            required in serverFileName, string
            required out serverFileSpec, string
            optional out errorText, a

            stack record
                ok, boolean
                errtxt, string
                fileData, string
                httpError, i4
                responseBody, string
                requestHeaders, [#]string
                responseHeaders, [#]string
            endrecord
        proc
            ok = true
            errtxt = ""

            if (!ok=StringTools.FileToString(localFileSpec,fileData))
            begin
                errtxt = "Failed to read local file"
                ok = false
            end

            if (ok)
            begin
                requestHeaders = new String[3]
                requestHeaders[1] = "Host: " + mHost + ":" + %string(mPort)
                requestHeaders[2] = "Content-Type: text/plain"
                requestHeaders[3] = "Content-Length: " + %string(fileData.Length)

                using httpError = %http_post(getURI("serverFileName"),,fileData,responseBody,errtxt,requestHeaders,responseHeaders,,,,,,,"1.1") select
                (201),
                    serverFileSpec = GetHeaderValue(responseHeaders,"ServerFileSpec")
                (),
                    ok = false
                endusing
            end

            if (^passed(errorText))
                errorText = errtxt

            mreturn ok

        endmethod


.ifdef DBLNET
        ;;; <summary>
        ;;; Upload a file in multiple chunks
        ;;; </summary>
        ;;; <param name="localFileSpec">Local file spec</param>
        ;;; <param name="serverFileName">Name of file to create on remote system</param>
        ;;; <param name="blockCount">How many blocks</param>
        ;;; <param name="serverFileSpec">Returned file spec on remote system</param>
        ;;; <param name="errorText">Returned erroe message</param>
        ;;; <returns>Result of operation</returns>
        public method UploadChunked, boolean
            required in localFileSpec, string
            required in serverFileName, string
            required in blockCount, n
            required out serverFileSpec, string
            optional out errorText, a

            stack record
                ok, boolean
                errtxt, string
                chunkReader, @FileChunkReader
                chunkData, D_HANDLE
                moreChunks, boolean
                doCleanup, boolean
            endrecord
        proc
            ok = true
            errtxt = ""

            ;Get the FileChunkReader up and running
            try
            begin
                chunkReader = new FileChunkReader(localFileSpec,blockCount)
                doCleanup = true
            end
            catch (e, @Exception)
            begin
                ok = false
                errtxt = "Failed to open file " + localFileSpec
                doCleanup = false
            end
            endtry

            ;Read the first chunk
            if (ok)
            begin
                moreChunks = chunkReader.ReadChunk(chunkData)

                ;Upload the first chunk
                data theUri = new System.Uri(getURI("chunked/start/"+serverFileName))
                disposable data client = new HttpClient()
                disposable data request = new HttpRequestMessage() { RequestUri=theUri, Method=HttpMethod.Post }
                request.Content = new StringContent(%string_from_handle(chunkData))
                disposable data response, @HttpResponseMessage, client.SendAsync(request).Result
                ok = response.IsSuccessStatusCode

                ;Was the entire file in the first chunk?
                if (!moreChunks)
                    clear chunkData
            end

            ;Process subsequent chunks until there are no more
            if (ok && moreChunks)
            begin
                while (moreChunks = chunkReader.ReadChunk(chunkData))
                begin
                    ;Upload the next chunk
                    data theUri = new System.Uri(getURI("chunked/continue/"+serverFileName))
                    disposable data client = new HttpClient()
                    disposable data request = new HttpRequestMessage() { RequestUri=theUri, Method=HttpMethod.Post }
                    request.Content = new StringContent(%string_from_handle(chunkData))
                    disposable data response, @HttpResponseMessage, client.SendAsync(request).Result
                    ok = response.IsSuccessStatusCode
                end
            end

            ;Process the final chunk 
            if (ok)
            begin
                ;If chunkData > 0 then there is final data to be uploaded

                ;Complete the chunked upload
                data theUri = new System.Uri(getURI("chunked/finish/"+serverFileName))
                disposable data client = new HttpClient()
                disposable data request = new HttpRequestMessage() { RequestUri=theUri, Method=HttpMethod.Post }
                request.Content = new StringContent(chunkData > 0 ? %string_from_handle(chunkData) : String.Empty)
                disposable data response, @HttpResponseMessage, client.SendAsync(request).Result
                
                if (ok = response.IsSuccessStatusCode)
                begin
                    data values, @IEnumerable<string>
                    if (response.Headers.TryGetValues("ServerFileSpec",values))
                    begin
                        serverFileSpec = values.First()
                    end
                end
            end

            ;Clean up
            if (doCleanup)
                chunkReader.Cleanup()

            ;Return any error message
            if (^passed(errorText))
                errorText = errtxt

            mreturn ok

        endmethod
.else
        ;;; <summary>
        ;;; Upload a file in multiple chunks
        ;;; </summary>
        ;;; <param name="localFileSpec">Local file spec</param>
        ;;; <param name="serverFileName">Name of file to create on remote system</param>
        ;;; <param name="blockCount">How many blocks</param>
        ;;; <param name="serverFileSpec">Returned file spec on remote system</param>
        ;;; <param name="errorText">Returned erroe message</param>
        ;;; <returns>Result of operation</returns>
        public method UploadChunked, boolean
            required in localFileSpec, string
            required in serverFileName, string
            required in blockCount, n
            required out serverFileSpec, string
            optional out errorText, a

            stack record
                ok, boolean
                errtxt, string
                httpError, i4
                requestBody, string
                responseBody, string
                requestHeaders, [#]string
                responseHeaders, [#]string

                chunkReader, @FileChunkReader
                chunkData, D_HANDLE
                moreChunks, boolean
                doCleanup, boolean

            endrecord
        proc
            ok = true
            errtxt = ""

            ;Get the FileChunkReader up and running
            try
            begin
                chunkReader = new FileChunkReader(localFileSpec,blockCount)
                doCleanup = true
            end
            catch (e, @Exception)
            begin
                ok = false
                errtxt = "Failed to open file " + localFileSpec
                doCleanup = false
            end
            endtry

            ;Prepare the HTTP environment
            if (ok)
            begin
                requestHeaders = new String[3]
                requestHeaders[1] = "Host: " + mHost + ":" + %string(mPort)
                requestHeaders[2] = "Content-Type: text/plain"
            end

            ;Read the first chunk
            if (ok)
            begin
                moreChunks = chunkReader.ReadChunk(chunkData)

                ;Upload the first chunk
                requestBody = %string_from_handle(chunkData)
                requestHeaders[3] = "Content-Length: " + %string(requestBody.Length)

                httpError = %http_post(getURI("chunked/start/"+serverFileName),,requestBody,responseBody,errtxt,requestHeaders,responseHeaders,,,,,,,"1.1")

                using httpError select
                (204),
                begin
                    nop
                end
                (),
                begin
                    ok = false
                end
                endusing

                ;Was the entire file in the first chunk?
                if (!moreChunks)
                    clear chunkData
            end

            ;Process subsequent chunks until there are no more
            if (ok && moreChunks)
            begin
                while (moreChunks = chunkReader.ReadChunk(chunkData))
                begin
                    ;Upload the first chunk
                    requestBody = %string_from_handle(chunkData)
                    requestHeaders[3] = "Content-Length: " + %string(requestBody.Length)
                    using httpError = %http_post(getURI("chunked/continue/"+serverFileName),,requestBody,responseBody,errtxt,requestHeaders,responseHeaders,,,,,,,"1.1") select
                    (204),
                    begin
                        nop
                    end
                    (),
                    begin
                        ok = false
                        exitloop
                    end
                    endusing
                end
            end

            ;Process the final chunk 
            if (ok)
            begin
                ;If chunkData != 0 then there is final data to be uploaded
                if (chunkData) then
                    requestBody = %string_from_handle(chunkData)
                else
                    requestBody = ""

                ;Complete the chunked upload
                requestHeaders[3] = "Content-Length: " + %string(requestBody.Length)
                using httpError = %http_post(getURI("chunked/finish/"+serverFileName),,requestBody,responseBody,errtxt,requestHeaders,responseHeaders,,,,,,,"1.1") select
                (201),
                begin
                    serverFileSpec = GetHeaderValue(responseHeaders,"ServerFileSpec")
                end
                (),
                begin
                    ok = false
                end
                endusing

            end

            ;Clean up
            if (doCleanup)
                chunkReader.Cleanup()

            ;Return any error message
            if (^passed(errorText))
                errorText = errtxt

            mreturn ok

        endmethod
.endc

        ;;; <summary>
        ;;; Download a text file
        ;;; </summary>
        ;;; <param name="serverFileName">Name of file on server</param>
        ;;; <param name="records">Returned array of strings (records)</param>
        ;;; <param name="errorMessage">Returned error message</param>
        ;;; <returns>Result of operation</returns>
        public method DownloadText, boolean
            required in  serverFileName, string
            required out records, [#]string
            required out errorMessage, string
            stack record
                ok, boolean
                httpError, i4
                requestHeaders, [#]string
                responseHeaders, [#]string
                responseBody, string
            endrecord
        proc
            errorMessage = ""

            requestHeaders = new string[1]
            requestHeaders[1] = "Host: " + mHost + ":" + %string(mPort)

            using httpError = %http_get(getURI("text/"+serverFileName),,responseBody,errorMessage,requestHeaders,responseHeaders,,,,,,,"1.1") select
            (0), ;OK (actually 200)
            begin
.ifdef DBLNET
                disposable data doc, @JsonDocument, JsonDocument.Parse(responseBody)
                data root, JsonElement, doc.RootElement

                if (root.ValueKind != JsonValueKind.Array)
                    throw new Exception("FileService did not return an array!")

                data elements = new List<string>()
                data element, JsonElement
                ;TODO: COMPILER BUG: enumerator variable should not be necessary (8/14/2023)
                data enumerator = root.EnumerateArray() 
                foreach element in enumerator
                begin
                    if (element.ValueKind == JsonValueKind.String)
                    begin
                        elements.Add(element.GetString())
                    end
                end

                records = elements.ToArray()
                ok = true
.else
                data parser,   @Json, new Json()
                data arrayObj, @JsonArray
                data itemObj,  @JsonText
                data result,   @JsonValue, parser.ParseJson(responseBody)
                data ix, int

                if(result.JsonType != JSON_TYPE.ARRAY_VAL)
                    throw new Exception("FileService did not return an array!")

                arrayObj = (JsonArray)result

                records = new string[arrayObj.arrayValues.Count]

                for ix from 0 thru arrayObj.arrayValues.Count-1
                    records[ix+1] = ((JsonText)arrayObj.arrayValues[ix]).Value
.endc
                ok = true
            end
            (404), ;Not found
            begin
                records = ^null
                ok = true
            end
            (),
            begin
                errorMessage = "HTTP " + %string(httpError) + ": " + errorMessage
                records = ^null
                ok = false
            end
            endusing

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Find if a file exists on the remote server
        ;;; </summary>
        ;;; <param name="serverFileName">Name of file on remote server</param>
        ;;; <param name="fileExists">Does the file exist?</param>
        ;;; <param name="errorMessage">Returned error message</param>
        ;;; <returns>Result of operation</returns>
        public method Exists, boolean
            required in serverFileName, string
            required out fileExists, boolean
            required out errorMessage, string
            stack record
                ok, boolean
                httperror, i4
                requestHeaders, [#]string
                responseHeaders, [#]string
                respopnseBody, string
            endrecord
        proc
            errorMessage = ""

            requestHeaders = new string[1]
            requestHeaders[1] = "Host: " + mHost + ":" + %string(mPort)

            using httperror = %http_get(getURI("exists/"+serverFileName),,respopnseBody,errorMessage,requestHeaders,responseHeaders,,,,,,,"1.1") select
            (204), ;No content
            begin
                fileExists = true
                ok = true
            end
            (404), ;Not found
            begin
                fileExists = false
                ok = true
            end
            (),
            begin
                errorMessage = "HTTP " + %string(httperror) + ": " + errorMessage
                fileExists = false
                ok = false
            end
            endusing

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Delete a file from the remote server
        ;;; </summary>
        ;;; <param name="serverFileName">Name of file to delete</param>
        ;;; <returns>Result of operation</returns>
        public method Delete, boolean
            required in serverFileName, string
            stack record
                httpError, i4
                errtxt, string
                requestHeaders, [#]string
                responseHeaders, [#]string
                requestBody, string
                respopnseBody, string
            endrecord
        proc

            requestHeaders = new string[1]
            requestHeaders[1] = "Host: " + mHost + ":" + %string(mPort)

            if (httpError = %http_delete(getURI(serverFileName),,requestBody,respopnseBody,errtxt,requestHeaders,,,,,,,"1.1"))
                mreturn false

            mreturn true

        endmethod

        ;;; <summary>
        ;;; Extract the value of an HTTP header
        ;;; </summary>
        ;;; <param name="headers">Array of headers</param>
        ;;; <param name="name">Name of header to extract</param>
        ;;; <returns>Extracted value</returns>
        private method GetHeaderValue, string
            required in headers, [#]string
            required in name, string
            stack record
                header, string
            endrecord
        proc
            foreach header in headers
            begin
                if (header.ToLower().StartsWith(name.ToLower()+": "))
                begin
                    data valueStart, int, header.IndexOf(": ",0) + 2
                    if (valueStart < header.Length)
                    begin
                        data value, string, header.Substring(valueStart,header.Length-valueStart)
                        mreturn value
                    end
                end
            end
            mreturn ""
        endmethod

        ;;; <summary>
        ;;; Get the full URI for an operation
        ;;; </summary>
        ;;; <param name="path">Path of operation</param>
        ;;; <returns>Returned URI</returns>
        private method getURI, string
            required in path, string
        proc
            mreturn "http://"+ mHost + ":" + %string(mPort) + "/FileService/" + path
        endmethod

    endclass

endnamespace