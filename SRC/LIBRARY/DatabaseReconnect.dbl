;*****************************************************************************
;
; Routine:      DatabaseReconnect
;
; Description:  Attempt to reconnect to the database following an earlier failure.
;
; Author:       Steve Ives, Synergex Professional Services Group
;
; Created:      30th December 2019
;
;*****************************************************************************
;
; Copyright (c) 2019, Synergex International, Inc.
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
; * Redistributions of source code must retain the above copyright notice,
;   this list of conditions and the following disclaimer.
;
; * Redistributions in binary form must reproduce the above copyright notice,
;   this list of conditions and the following disclaimer in the documentation
;   and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
;*****************************************************************************


import ReplicationLibrary
import System.Collections

function DatabaseReconnect, boolean
    required in theException, @DatabaseCommunicationException

    .include "CONNECTDIR:ssql.def"
    .include "DBLDIR:namspc.def"
    .include "REPLICATOR_INCLUDE:SmtpMail.def"

    stack record
        reconnected,        boolean
        replicatedTables,   @ArrayList
        tableName,          string
        dberrtxt,           a512
        length,             int
        dbstatus,           int
        connectionAttempt,  int
    endrecord

proc
    reconnected = false

    Logger.Log("ERROR: Database connection failed!")
    Logger.Log("Routine " + theException.FailingRoutine + " detected error " + %string(theException.DatabaseErrorNumber) + " " + theException.DatabaseErrorMessage )

    ;Get a list of all replicated tables

    xcall GetReplicatedTables(Settings.InstanceName,replicatedTables)

    ;Attempt to close any open cursors - no errors will be generated regardless of what happens

    Logger.Log("Closing database cursors...")

    foreach tableName in replicatedTables
    begin
        xcall xsubr(tableName + "Close",Settings.DatabaseChannel)
    end

    ;Attempt to disconnect from the database - no errors will be generated regardless of what happens

    xcall DatabaseDisconnect

    ;Attempt to re-connect to the database

    if (Settings.RetryMaxAttempts < 1)
    begin
        ;Re-connect has been disabled!
        Logger.Log("Database re-connect disabled by RetryMaxAttempts")
        freturn false
    end

    Logger.Log("Attempting reconnect (" + %string(Settings.RetryMaxAttempts) + " attempts, " + %string(Settings.RetryDelaySeconds) + "s interval)")

    for connectionAttempt from 1 thru Settings.RetryMaxAttempts
    begin
        if (Settings.RetryDelaySeconds)
        begin
            sleep Settings.RetryDelaySeconds
        end
            
        Logger.Log("Attempt " + %string(connectionAttempt) + "...")

        if (reconnected = %DatabaseConnect) then
        begin
            Logger.Log("Reconnected")

            ;Send email notification re re-connect success
            if (Settings.CanSendEmail())
            begin
                xcall SendEmail("Replicator " + %atrim(Settings.InstanceName) + " reconnected to database.",^null,false,^null)
            end

            exitloop
        end
        else if (Settings.CanSendEmail())
        begin
            ;Send email notification re re-connect failure
            xcall SendEmail("ERROR: Replicator " + %atrim(Settings.InstanceName) + " reconnect attempt " + %string(connectionAttempt) + " failed!",^null,false,^null)
        end
    end

    if (!reconnected)
    begin
        Logger.ErrorLog("ERROR: Failed to reconnect to database!")
        if (Settings.CanSendEmail())
        begin
            ;Send email notification re re-connect failure
            xcall SendEmail("ERROR: Replicator " + %atrim(Settings.InstanceName) + " reconnect failed!",^null,false,^null)
        end
        freturn false
    end

    freturn true

endfunction

